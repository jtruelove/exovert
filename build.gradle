buildscript {
    repositories { jcenter() }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.1.1'
    }
}

apply plugin: 'java'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'application'
apply plugin: 'maven'

version = '0.2.2'
group = "com.cyngn.vertx"
archivesBaseName = "exovert"
mainClassName = "com.cyngn.exovert.CrudCreator"


if (!JavaVersion.current().java8Compatible) {
    throw new IllegalStateException('''A Haiku:
                                      |  This needs Java 8,
                                      |  You are using something else,
                                      |  Refresh. Try again.'''.stripMargin())
}

repositories {
    mavenCentral()
    maven { url = 'http://oss.sonatype.org/content/repositories/snapshots/' }
    maven { url = 'http://oss.sonatype.org/content/repositories/releases/' }
}

dependencies {
    compile 'io.vertx:vertx-core:3.1.0'
    compile "joda-time:joda-time:2.4"
    compile "com.google.guava:guava:18.0"
    compile "commons-lang:commons-lang:2.6"
    compile "net.sf.jopt-simple:jopt-simple:4.9"
    compile "com.cyngn.vertx:vertx-util:0.5.8"
    compile "com.englishtown.vertx:vertx-cassandra:3.0.0"
    compile "com.englishtown.vertx:vertx-cassandra-mapping:3.0.0"
    compile "com.squareup:javapoet:1.2.0"
    compile "io.vertx:vertx-codegen:3.0.0"
    compile "org.apache.cassandra:cassandra-all:2.2.3"
    testCompile "junit:junit:4.11"
    testCompile "io.vertx:vertx-unit:3.0.0"
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.5'
}

task release() << {}

gradle.taskGraph.whenReady {taskGraph ->
    if (!taskGraph.hasTask(release)) {
        version += '-SNAPSHOT'
    }
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

shadowJar {
    classifier = 'fat'
    manifest {
        attributes 'Main-Class': mainClassName,
                   'Implementation-Title': archivesBaseName,
                   'Implementation-Version': version
    }

    dependsOn "test"
}

task generateWrapper {
    dependsOn "generateRestCreatorWrapper"
    dependsOn "generateCrudCreatorWrapper"
}

//TODO: move this to plugin or class and be DRY
task generateRestCreatorWrapper {
    dependsOn "shadowJar"

    doFirst {
        String className = "com.cyngn.exovert.RestCreator"
        String wrapperName = "RestCreator"

        def binDir = new File(project.buildDir, "bin")

        if (!binDir.exists()) {
            binDir.mkdirs()
        }

        File wrapperScript = new File(binDir, wrapperName)

        Writer out = new OutputStreamWriter(new FileOutputStream(wrapperScript), "UTF-8")

        try {
            out.write("#! /bin/sh\n")
            out.write("java -cp " + shadowJar.getArchivePath() + " " + className + " \"\$@\"")
        } finally {
            out.close()
        }

        ant.chmod(file: wrapperScript.path, perm: "+x")
    }
}

task generateCrudCreatorWrapper {
    dependsOn "shadowJar"

    doFirst {
        String className = "com.cyngn.exovert.CrudCreator"
        String wrapperName = "CrudCreator"

        def binDir = new File(project.buildDir, "bin")

        if (!binDir.exists()) {
            binDir.mkdirs()
        }

        File wrapperScript = new File(binDir, wrapperName)

        Writer out = new OutputStreamWriter(new FileOutputStream(wrapperScript), "UTF-8")

        try {
            out.write("#! /bin/sh\n")
            out.write("java -cp " + shadowJar.getArchivePath() + " " + className + " \"\$@\"")
        } finally {
            out.close()
        }

        ant.chmod(file: wrapperScript.path, perm: "+x")
    }
}
